// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/role.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/role.go -destination=test/mock/./service/role.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-echo-template/internal/entity"
	dto "github.com/sherwin-77/go-echo-template/internal/http/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleService is a mock of RoleService interface.
type MockRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockRoleServiceMockRecorder
	isgomock struct{}
}

// MockRoleServiceMockRecorder is the mock recorder for MockRoleService.
type MockRoleServiceMockRecorder struct {
	mock *MockRoleService
}

// NewMockRoleService creates a new mock instance.
func NewMockRoleService(ctrl *gomock.Controller) *MockRoleService {
	mock := &MockRoleService{ctrl: ctrl}
	mock.recorder = &MockRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleService) EXPECT() *MockRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleService) CreateRole(ctx context.Context, request dto.RoleRequest) (*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, request)
	ret0, _ := ret[0].(*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleServiceMockRecorder) CreateRole(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleService)(nil).CreateRole), ctx, request)
}

// DeleteRole mocks base method.
func (m *MockRoleService) DeleteRole(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleServiceMockRecorder) DeleteRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleService)(nil).DeleteRole), ctx, id)
}

// GetRoleByID mocks base method.
func (m *MockRoleService) GetRoleByID(ctx context.Context, id string) (*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleServiceMockRecorder) GetRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleService)(nil).GetRoleByID), ctx, id)
}

// GetRoles mocks base method.
func (m *MockRoleService) GetRoles(ctx context.Context) ([]entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx)
	ret0, _ := ret[0].([]entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockRoleServiceMockRecorder) GetRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleService)(nil).GetRoles), ctx)
}

// UpdateRole mocks base method.
func (m *MockRoleService) UpdateRole(ctx context.Context, request dto.UpdateRoleRequest) (*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, request)
	ret0, _ := ret[0].(*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleServiceMockRecorder) UpdateRole(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleService)(nil).UpdateRole), ctx, request)
}
