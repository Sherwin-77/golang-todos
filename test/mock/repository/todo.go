// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/todo.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/todo.go -destination=test/mock/./repository/todo.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/golang-todos/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
	isgomock struct{}
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockTodoRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockTodoRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockTodoRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockTodoRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTodoRepositoryMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTodoRepository)(nil).Commit), tx)
}

// CreateTodo mocks base method.
func (m *MockTodoRepository) CreateTodo(ctx context.Context, tx *gorm.DB, todo *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, tx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoRepositoryMockRecorder) CreateTodo(ctx, tx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoRepository)(nil).CreateTodo), ctx, tx, todo)
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(ctx context.Context, tx *gorm.DB, todo *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, tx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(ctx, tx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), ctx, tx, todo)
}

// GetTodoByID mocks base method.
func (m *MockTodoRepository) GetTodoByID(ctx context.Context, tx *gorm.DB, id string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", ctx, tx, id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockTodoRepositoryMockRecorder) GetTodoByID(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockTodoRepository)(nil).GetTodoByID), ctx, tx, id)
}

// GetTodosByUserID mocks base method.
func (m *MockTodoRepository) GetTodosByUserID(ctx context.Context, tx *gorm.DB, userID string) ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodosByUserID", ctx, tx, userID)
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosByUserID indicates an expected call of GetTodosByUserID.
func (mr *MockTodoRepositoryMockRecorder) GetTodosByUserID(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosByUserID", reflect.TypeOf((*MockTodoRepository)(nil).GetTodosByUserID), ctx, tx, userID)
}

// GetTodosFiltered mocks base method.
func (m *MockTodoRepository) GetTodosFiltered(ctx context.Context, tx *gorm.DB, limit, offset int, order, query any, args ...any) ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, limit, offset, order, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTodosFiltered", varargs...)
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodosFiltered indicates an expected call of GetTodosFiltered.
func (mr *MockTodoRepositoryMockRecorder) GetTodosFiltered(ctx, tx, limit, offset, order, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, limit, offset, order, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodosFiltered", reflect.TypeOf((*MockTodoRepository)(nil).GetTodosFiltered), varargs...)
}

// Rollback mocks base method.
func (m *MockTodoRepository) Rollback(tx *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTodoRepositoryMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTodoRepository)(nil).Rollback), tx)
}

// SingleTransaction mocks base method.
func (m *MockTodoRepository) SingleTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SingleTransaction indicates an expected call of SingleTransaction.
func (mr *MockTodoRepositoryMockRecorder) SingleTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleTransaction", reflect.TypeOf((*MockTodoRepository)(nil).SingleTransaction))
}

// UpdateTodo mocks base method.
func (m *MockTodoRepository) UpdateTodo(ctx context.Context, tx *gorm.DB, todo *entity.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, tx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoRepositoryMockRecorder) UpdateTodo(ctx, tx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoRepository)(nil).UpdateTodo), ctx, tx, todo)
}

// WithTransaction mocks base method.
func (m *MockTodoRepository) WithTransaction(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTodoRepositoryMockRecorder) WithTransaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTodoRepository)(nil).WithTransaction), fn)
}
